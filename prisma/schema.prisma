// Fixed Prisma schema - simple approach
generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  phone     String   @unique
  username  String
  photoStoragePath     String?
  photoThumbnailPath   String?

  videos    Video[]
  adminEvents Event[] @relation("AdminRelation")
  eventParticipants EventParticipant[]
  
  // Chat relations
  sentMessages Message[] @relation("MessageSender")
}

model Video {
  id            String   @id @default(uuid())
  storagePath   String  @unique
  thumbnailPath String   // Now required
  createdAt     DateTime @default(now())
  user          User     @relation(fields: [userId], references: [id])
  userId        String
  status        String   @default("pending") // "pending" | "published"
  
  // Many-to-many relationship with events
  events        VideoEvent[]

  // Indexes for feed performance
  @@index([userId, createdAt])
  @@index([status, createdAt])
}

model Event {
  id          String   @id @default(uuid())
  name        String?
  information String?
  date        DateTime
  createdAt   DateTime @default(now())
  location    String?
  photoStoragePath     String?
  photoThumbnailPath   String?

  admin       User     @relation("AdminRelation", fields: [adminId], references: [id])
  adminId     String

  participants EventParticipant[]
  
  // Many-to-many relationship with videos
  videos      VideoEvent[]
  
  // Optional chat - created lazily when first user opens chat
  chat        Chat?    @relation("EventChat")
}

model VideoEvent {
  id        String   @id @default(uuid())
  video     Video    @relation(fields: [videoId], references: [id], onDelete: Cascade)
  videoId   String
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId   String
  addedAt   DateTime @default(now())
  
  @@unique([videoId, eventId])
  @@index([videoId])
  @@index([eventId])
  @@index([eventId, addedAt]) // For feed queries
}

model EventParticipant {
  id        String   @id @default(uuid())
  event     Event    @relation(fields: [eventId], references: [id])
  eventId   String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  joinedAt  DateTime @default(now())

  @@unique([userId, eventId], name: "userId_eventId")
}

// Chat belongs to an event - created lazily
model Chat {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Each chat belongs to exactly one event
  event     Event    @relation("EventChat", fields: [eventId], references: [id], onDelete: Cascade)
  eventId   String   @unique
  
  messages  Message[]
  
  @@index([eventId])
  @@index([createdAt])
}

model Message {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  
  chatId    String
  chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  
  senderId  String
  sender    User     @relation("MessageSender", fields: [senderId], references: [id])
  
  // Message type (text, image, etc.) - extensible for future features
  type      String   @default("text") // "text", "image", "video"
  
  // For read receipts (optional)
  readBy    MessageRead[]
  
  @@index([chatId, createdAt])
  @@index([senderId])
}

// Optional: For read receipts functionality
model MessageRead {
  id        String   @id @default(uuid())
  messageId String
  userId    String
  readAt    DateTime @default(now())
  
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  
  @@unique([messageId, userId])
  @@index([messageId])
  @@index([userId])
}